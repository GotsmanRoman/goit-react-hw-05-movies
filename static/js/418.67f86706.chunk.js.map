{"version":3,"file":"static/js/418.67f86706.chunk.js","mappings":"gSAEaA,EAAYC,EAAAA,EAAAA,IAAH,8FAMTC,EAAaD,EAAAA,EAAAA,IAAH,uFAKVE,EAAaF,EAAAA,EAAAA,GAAH,qDAIVG,EAAaH,EAAAA,EAAAA,EAAH,qG,SCRR,SAASI,EAAT,GAAkC,IAAZC,EAAW,EAAXA,QAC3BC,EAAYD,EAAZC,QAER,OACE,8BACIC,OAAOC,KAAKH,GAASI,QAGrB,SAACV,EAAD,UACGO,EAAQG,OACPH,EAAQI,KAAI,SAAAC,GACV,OACE,UAACV,EAAD,YACE,UAACC,EAAD,sBAAqBS,EAAKC,WAC1B,UAACT,EAAD,yBAAwBQ,EAAKE,aAFdF,EAAKG,GAKzB,KAED,SAACb,EAAD,2CAbJ,SAACc,EAAA,EAAD,KAmBP,CC5Bc,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOH,EAAP,KAAgBI,EAAhB,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMV,GAAN,uFAEtBQ,GAAW,GAFW,UAGDG,EAAAA,EAAAA,IAAoBX,GAHnB,OAGhBY,EAHgB,OAItBN,EAAWM,GACXJ,GAAW,GALW,gDAOtBK,QAAQC,IAAI,SAPU,yDAAH,sDAUvBJ,EAAkBP,EACnB,GAAE,CAACA,KAGF,8BACGI,GACC,SAACN,EAAA,EAAD,KAEA,SAACX,EAAD,CAAYC,QAASW,EAASK,UAAWA,KAIhD,C,kMCjCKQ,EAAW,mCACjBC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiDD,EAE1C,IAAME,EAAmB,mCAAG,+FAC3BC,EAAU,CACdC,OAAQ,CACNC,QAASL,EACTM,KAAM,IAJuB,UAQVL,EAAAA,EAAAA,GAAM,iBAAkBE,GARd,uBAQzBI,EARyB,EAQzBA,KARyB,kBAS1BA,GAT0B,2CAAH,qDAWnBC,EAAc,mCAAG,WAAMvB,GAAN,kFACtBkB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHe,UAOLC,EAAAA,EAAAA,GAAM,UAAD,OAAWhB,GAAMkB,GAPjB,uBAOpBI,EAPoB,EAOpBA,KAPoB,kBAQrBA,GARqB,2CAAH,sDAUdE,EAAmB,mCAAG,WAAMxB,GAAN,kFAC3BkB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHoB,UAOVC,EAAAA,EAAAA,GAAM,UAAD,OAAWhB,EAAX,YAAyBkB,GAPpB,uBAOzBI,EAPyB,EAOzBA,KAPyB,kBAQ1BA,GAR0B,2CAAH,sDAUnBX,EAAmB,mCAAG,WAAMX,GAAN,kFAC3BkB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHoB,UAOVC,EAAAA,EAAAA,GAAM,UAAD,OAAWhB,EAAX,YAAyBkB,GAPpB,uBAOzBI,EAPyB,EAOzBA,KAPyB,kBAQ1BA,GAR0B,2CAAH,sDAUnBG,EAAgB,mCAAG,WAAMC,GAAN,kFACxBR,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHiB,UAOPC,EAAAA,EAAAA,GAAM,uBAAD,OAAwBU,GAAQR,GAP9B,uBAOtBI,EAPsB,EAOtBA,KAPsB,kBAQvBA,GARuB,2CAAH,qD","sources":["components/Components/ReviewItem/ReviewItem.module.jsx","components/Components/ReviewItem/ReviewItem.jsx","components/Components/ReviewItem/Reviews.jsx","components/Components/utils/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  padding: 20px;\n`;\nexport const ReviewData = styled.div`\n  display: flex;\n  row-gap: 20px;\n  flex-direction: column;\n`;\nexport const ReviewInfo = styled.h3`\n  padding: 0;\n  margin: 0;\n`;\nexport const ReviewText = styled.p`\n  padding: 0;\n  margin: 0;\n  letter-spacing: 0.5px;\n  line-height: 20px;\n`;\n","import Loader from '../Loader/Loader';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  ReviewData,\n  ReviewInfo,\n  ReviewText,\n} from './ReviewItem.module';\n\nexport default function ReviewItem({ reviews }) {\n  const { results } = reviews;\n\n  return (\n    <>\n      {!Object.keys(reviews).length ? (\n        <Loader />\n      ) : (\n        <Container>\n          {results.length ? (\n            results.map(item => {\n              return (\n                <ReviewData key={item.id}>\n                  <ReviewInfo>Author: {item.author}</ReviewInfo>\n                  <ReviewText>Character: {item.content}</ReviewText>\n                </ReviewData>\n              );\n            })\n          ) : (\n            <ReviewData>No reviews for this movie</ReviewData>\n          )}\n        </Container>\n      )}\n    </>\n  );\n}\n\nReviewItem.propTypes = {\n  reviews: PropTypes.object.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieByReviews } from 'components/Components/utils/API';\nimport ReviewItem from 'components/Components/ReviewItem/ReviewItem';\nimport Loader from 'components/Components/Loader/Loader';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [Reviews, setReviews] = useState({});\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovieByReviews = async id => {\n      try {\n        setLoading(true);\n        const result = await fetchMovieByReviews(id);\n        setReviews(result);\n        setLoading(false);\n      } catch {\n        console.log('error');\n      }\n    };\n    getMovieByReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ReviewItem reviews={Reviews} isLoading={isLoading}></ReviewItem>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\nconst AUTH_KEY = 'e88eb452a05a2e0e5aee8e4233a13d99';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = AUTH_KEY;\n\nexport const fetchMovieByPopular = async () => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n      page: 1,\n    },\n  };\n\n  const { data } = await axios(`/movie/popular`, options);\n  return data;\n};\nexport const fetchMovieById = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}`, options);\n  return data;\n};\nexport const fetchMovieByCredits = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}/credits`, options);\n  return data;\n};\nexport const fetchMovieByReviews = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}/reviews`, options);\n  return data;\n};\nexport const fetchMovieByName = async name => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/search/movie?query=${name}`, options);\n  return data;\n};\n"],"names":["Container","styled","ReviewData","ReviewInfo","ReviewText","ReviewItem","reviews","results","Object","keys","length","map","item","author","content","id","Loader","Reviews","movieId","useParams","useState","setReviews","isLoading","setLoading","useEffect","getMovieByReviews","fetchMovieByReviews","result","console","log","AUTH_KEY","axios","fetchMovieByPopular","options","params","api_key","page","data","fetchMovieById","fetchMovieByCredits","fetchMovieByName","name"],"sourceRoot":""}