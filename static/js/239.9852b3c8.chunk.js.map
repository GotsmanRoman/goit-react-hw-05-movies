{"version":3,"file":"static/js/239.9852b3c8.chunk.js","mappings":"wRAEaA,EAAYC,EAAAA,EAAAA,IAAH,8FAMTC,EAAYD,EAAAA,EAAAA,IAAH,8KASTE,EAASF,EAAAA,EAAAA,IAAH,sFAKNG,EAAYH,EAAAA,EAAAA,GAAH,qDAITI,EAAYJ,EAAAA,EAAAA,GAAH,4E,mBChBP,SAASK,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QACzBC,EAASD,EAATC,KAER,OACE,8BACIC,OAAOC,KAAKH,GAASI,QAGrB,SAACX,EAAD,UACGQ,EAAKI,KAAI,SAAAC,GACR,OACE,UAACX,EAAD,YACE,SAACC,EAAD,CACEW,IAAG,4DAAuDD,EAAKE,iBAEjE,SAACX,EAAD,UAAYS,EAAKG,QACjB,UAACX,EAAD,yBAAuBQ,EAAKI,eALdJ,EAAKK,GAQxB,OAbH,SAACC,EAAA,EAAD,KAkBP,CC5Bc,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMX,GAAN,uFAEtBS,GAAW,GAFW,UAGDG,EAAAA,EAAAA,IAAoBZ,GAHnB,OAGhBa,EAHgB,OAItBN,EAAWM,GACXJ,GAAW,GALW,gDAOtBK,QAAQC,IAAI,SAPU,yDAAH,sDAUvBJ,EAAkBR,EACnB,GAAE,CAACA,KAGF,8BACGK,GACC,SAACP,EAAA,EAAD,KAEA,SAACb,EAAD,CAAUC,QAASiB,EAASE,UAAWA,KAI9C,C,kMCjCKQ,EAAW,mCACjBC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiDD,EAE1C,IAAME,EAAmB,mCAAG,+FAC3BC,EAAU,CACdC,OAAQ,CACNC,QAASL,EACTM,KAAM,IAJuB,UAQVL,EAAAA,EAAAA,GAAM,iBAAkBE,GARd,uBAQzBI,EARyB,EAQzBA,KARyB,kBAS1BA,GAT0B,2CAAH,qDAWnBC,EAAc,mCAAG,WAAMxB,GAAN,kFACtBmB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHe,UAOLC,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,GAAMmB,GAPjB,uBAOpBI,EAPoB,EAOpBA,KAPoB,kBAQrBA,GARqB,2CAAH,sDAUdX,EAAmB,mCAAG,WAAMZ,GAAN,kFAC3BmB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHoB,UAOVC,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAAyBmB,GAPpB,uBAOzBI,EAPyB,EAOzBA,KAPyB,kBAQ1BA,GAR0B,2CAAH,sDAUnBE,EAAmB,mCAAG,WAAMzB,GAAN,kFAC3BmB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHoB,UAOVC,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAAyBmB,GAPpB,uBAOzBI,EAPyB,EAOzBA,KAPyB,kBAQ1BA,GAR0B,2CAAH,sDAUnBG,EAAgB,mCAAG,WAAM5B,GAAN,kFACxBqB,EAAU,CACdC,OAAQ,CACNC,QAASL,IAHiB,UAOPC,EAAAA,EAAAA,GAAM,uBAAD,OAAwBnB,GAAQqB,GAP9B,uBAOtBI,EAPsB,EAOtBA,KAPsB,kBAQvBA,GARuB,2CAAH,qD","sources":["components/Components/CastItem/CastItem.module.jsx","components/Components/CastItem/CastItem.jsx","components/Components/CastItem/Cast.jsx","components/Components/utils/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n`;\nexport const ActorData = styled.div`\n  width: 200px;\n  height: 330px;\n  display: flex;\n  row-gap: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Poster = styled.img`\n  width: 200px;\n  height: 250px;\n  background-size: cover;\n`;\nexport const ActorInfo = styled.h3`\n  padding: 0;\n  margin: 0;\n`;\nexport const ActorRole = styled.h5`\n  text-align: center;\n  padding: 0;\n  margin: 0;\n`;\n","import {\n  Container,\n  ActorData,\n  Poster,\n  ActorInfo,\n  ActorRole,\n} from './CastItem.module';\nimport Loader from '../Loader/Loader';\nimport PropTypes from 'prop-types';\n\nexport default function CastItem({ credits }) {\n  const { cast } = credits;\n\n  return (\n    <>\n      {!Object.keys(credits).length ? (\n        <Loader />\n      ) : (\n        <Container>\n          {cast.map(item => {\n            return (\n              <ActorData key={item.id}>\n                <Poster\n                  src={`https://www.themoviedb.org/t/p/w138_and_h175_face/${item.profile_path}`}\n                ></Poster>\n                <ActorInfo>{item.name}</ActorInfo>\n                <ActorRole>Character: {item.character}</ActorRole>\n              </ActorData>\n            );\n          })}\n        </Container>\n      )}\n    </>\n  );\n}\nCastItem.propTypes = {\n  credits: PropTypes.object.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieByCredits } from 'components/Components/utils/API';\nimport CastItem from 'components/Components/CastItem/CastItem';\nimport Loader from 'components/Components/Loader/Loader';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [Credits, setCredits] = useState({});\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovieByCredits = async id => {\n      try {\n        setLoading(true);\n        const result = await fetchMovieByCredits(id);\n        setCredits(result);\n        setLoading(false);\n      } catch {\n        console.log('error');\n      }\n    };\n    getMovieByCredits(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader></Loader>\n      ) : (\n        <CastItem credits={Credits} isLoading={isLoading}></CastItem>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\nconst AUTH_KEY = 'e88eb452a05a2e0e5aee8e4233a13d99';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = AUTH_KEY;\n\nexport const fetchMovieByPopular = async () => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n      page: 1,\n    },\n  };\n\n  const { data } = await axios(`/movie/popular`, options);\n  return data;\n};\nexport const fetchMovieById = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}`, options);\n  return data;\n};\nexport const fetchMovieByCredits = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}/credits`, options);\n  return data;\n};\nexport const fetchMovieByReviews = async id => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/movie/${id}/reviews`, options);\n  return data;\n};\nexport const fetchMovieByName = async name => {\n  const options = {\n    params: {\n      api_key: AUTH_KEY,\n    },\n  };\n\n  const { data } = await axios(`/search/movie?query=${name}`, options);\n  return data;\n};\n"],"names":["Container","styled","ActorData","Poster","ActorInfo","ActorRole","CastItem","credits","cast","Object","keys","length","map","item","src","profile_path","name","character","id","Loader","Cast","movieId","useParams","useState","Credits","setCredits","isLoading","setLoading","useEffect","getMovieByCredits","fetchMovieByCredits","result","console","log","AUTH_KEY","axios","fetchMovieByPopular","options","params","api_key","page","data","fetchMovieById","fetchMovieByReviews","fetchMovieByName"],"sourceRoot":""}